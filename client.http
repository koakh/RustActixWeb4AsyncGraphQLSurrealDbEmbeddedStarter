@host = 127.0.0.1
@port = 8282
@baseUri = http://{{host}}:{{port}}
@gqlUri = {{baseUri}}/graphql
@contentType = application/json
@requestType = GraphQL
# @authToken = {{SignInMutation.response.body.$.data.signIn}}

### queryHero
// @name queryHero

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
// Authorization: Bearer {{authToken}}

query hero($episode: Episode!) {
  hero(episode: $episode) {
    id
    name
    friends{
      id
      name      
    }
    appearsIn
  }
}

{
  "episode": "NEW_HOPE"
}

### queryPerson
// @name queryPerson

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
// Authorization: Bearer {{authToken}}

query person($id: String!) {
  person(id: $id) {
    id
    name
    age
    metaData {
      field
    }
  }
}

{
  // use thing id without table
  "id": "tobie"
}


### queryPersons
// @name queryPersons

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
// Authorization: Bearer {{authToken}}

query persons($filter: InputFilter, $order: Order) {
  persons(
    first: 1,
    after: "1",
    filter: $filter,
    order: $order
  ) {
    totalCount
    edges{
      node{
        id
        name
        age
      }
    }
    pageInfo{
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
  }
}

{
  "filter": {
    // ids don't use table: prefis
    // "id": "tobie"
    // "id": "y1vy98ukx9bp535uu7sz"
    // "name": "Koakh"
    "age": 50
  },
  "order": "ID"
}

### queryPersonsNew
// @name queryPersonsNew

POST {{gqlUri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}
// Authorization: Bearer {{authToken}}

query personsNew() {
  personsNew(
    first: 1
    # TODO: invalid cursor, may be on decode
    # after: "1"
  ) {
    totalCount
    edges{
      node{
        id
        name
        age
      }
    }
    pageInfo{
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
  }
}

{
}
